°JAVA
-Es un lenguaje de alto nivel.
-Es un lenguaje Multiplataforma (Se puede correr en cualquier sistema operativo)
-Es distribuido, es decir , trabaja con muchos protocolos
-Es Multihilo, es decir, Puede trabajar en paralelo.

-Java fue creado en 1991 por James Gosling
-Hatsa el 2009 Java fue propiedad de SunMicroSystems
-En 2009 Oracle compró Java.

-JDK : Java Development Kit
-JRE : Java Runtime Enviroment

°Verificación de Java de Java
-Abrir la consola del sistema operativo.
-Verificar Java con el comando java -version, si no funciona, se deberá instalar Java
-Verifivar el compilador con javac , si no funciona se deben configurar variables del entorno.

°Cambio de Variables del Entorno
-Ir a panel de control/sistema, luego configuraciones avanzadas.
-dar click en configurar variables del entorno.
-Dar en Editar.
-Dar en Nuevo y pegar la ruta del JDK (C:\Program Files\Java\jdk-14.0.1\bin)

°Tipos de Datos Primitivos
	°Enteros
	byte: -128 a 127 - 1 byte
	short: -32768 a 32767 - 2 bytes
	int: -2147483648 a 2147483648 -4 bytes
	long: 8 bytes
	°Decimales
	float - 4 bytes
	double - 8 bytes
	°Texto
	char - 2 bytes
	°Logivos
	boolean - 2 bytes

-Las variables constantes se escriben en mayusculas
-Los nombres de las clase siempre empiezan con minusculas
-Para hacer Cast (Convertir de una variable a otra) se usa la siguiente sintaxis #tipoNuevo #nombreNuevo = (#tipoNuevo) #variableAconvertir ;
-Para hacer un arreglo se usa la sintaxis #TipoDato[] #nombre; o #TipoDato #nombre[]
-Para denifir el tamaño de un arreglo es (una vez creado) #nombre=new #TipoDato[#capacidad];

°Operadores

	°Aritmetico
	+ , - , * , / , %

	°De asignación
	|Operador | Aplicación | Desglose |
	|  +=	  | a += b     | a = a + b|
	|  -=	  | a -= b     | a = a - b|
	|  *=	  | a *= b     | a = a * b|
	|  /=	  | a /= b     | a = a / b|
	|  %=	  | a %= b     | a = a % b|

	°Incremento / Decremento
		++	--

	°Operadores equidad
	 	==	!=

	°OPeradores de Relación
	<	-	menor que
	>	-	mayor que
	<=	-	menor igual que
	>=	-	mayor igual que

	°Operadores Lógicos
	&&	AND
	||	OR	
	!	NOT

°Palabras Reservadas para terminar procesos
• break: Nos permite romper o interrumpir un proceso, es usado en los ciclos para finalizarlos de forma rápida o en los case para que el programa pueda continuar.
• continue: Este genera un salto al siguiente proceso en las líneas de código.
• return: Regresa un valor y finaliza el proceso donde se ejecuta.

°Ciclo ForEach Anidado (Ejemplo)

public class ForEachAninado {

    public static void main(String[] args) {

        //Definimos un array de 3 filas x 5 columnas
        int array[][]={{1,2,3,4,5}, {6,7,8,9,10}, {11,12,13,14,15}};

        //Recorremos el array multidimensional
        for (int[] arrayInterno : array){
            for(int numero: arrayInterno){
                System.out.println(numero);
            }
        }
    }

}

°Programación Orientada a Objetod (POO)
-Un objeto tiene atributos (caracteristicas)
-Los nombres de los objetos y sus atributos por lo general son sustantivos.
-Tienen operaciones que por lo general suelen ser verbos o sustantivos y verbos.

°Clase
-Una clase es la forma en c´´omo defines tu objeto para generar más objetos.
-Las Clases se pueden comportar como plantillas.

°Import

_import _define a las clases o grupos de clases externas que utilices en tu clase, ésta es una palabra reservada y la verás siempre en el encabezado del archivo de la clase, por ejemplo:

import java.util.Date;

Puedes importar tan solo una clase como en el ejemplo anterior o un paquete de clases:

import java.util.*;

Además que puedes incluir múltiples sentencias import:

import java.util.Date;
import java.util.Calendar;

Es una buena práctica especificar la importación completa del paquete de clases *, sin embargo puede causar conflictos con clases que vivan en diferentes paquetes pero tengan el mismo nombre por ejemplo:

java.util.Date;
java.sql.Date;

Cuando tengamos algo similar podemos usar la siguiente sintaxis para diferenciar.
Elegimos qué import conservar:

import java.util.Date;

Y la otra clase la llamamos de la siguiente forma

java.sql.Date date = new java.sql.Date();

En el caso de miembros static que veremos más adelante se importarán de la siguiente forma:

import static java.lang.Math.PI; // importa solo la variable estática PI
import static java.lang.Math.*; // importa todos los elementos estáticos de la clase

Por lo tanto podrás usarlos así:

double r = cos(PI * theta);

Cosas que debes saber:

Por default siempre se importa java.lang.*
No necesitas importar las clases que estén en el mismo paquete.

°Sobrecarga
La sobre carga ocurre cuando se tienen varios métodos con el mismo nombre pero con diferentes argumentos o resultados.
